/*
 * Automatically Generated from Mathematica.
 * Mon 25 Jun 2018 14:53:34 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t2163;
  double t2327;
  double t2347;
  double t1358;
  double t2508;
  double t239;
  double t2239;
  double t2712;
  double t2815;
  double t3250;
  double t3362;
  double t3369;
  double t4369;
  double t4916;
  double t4981;
  double t5005;
  double t5017;
  double t4668;
  double t4831;
  double t4914;
  double t5245;
  double t5514;
  double t5536;
  double t5558;
  double t5596;
  double t5442;
  double t5486;
  double t5507;
  double t5673;
  double t5676;
  double t5714;
  double t5779;
  double t5790;
  double t5798;
  double t5803;
  double t5828;
  double t5837;
  double t5842;
  double t5897;
  double t5899;
  double t5908;
  double t5911;
  double t5918;
  double t5928;
  double t5953;
  double t5981;
  double t5997;
  double t6011;
  double t6025;
  double t6034;
  double t6035;
  double t6047;
  double t6050;
  double t6054;
  double t6067;
  double t6074;
  double t6078;
  double t6080;
  double t6091;
  double t6093;
  double t6096;
  double t6101;
  double t6102;
  double t6107;
  double t6116;
  double t6124;
  double t6126;
  double t6130;
  double t6154;
  double t6161;
  double t6162;
  double t775;
  double t811;
  double t897;
  double t1347;
  double t4419;
  double t4581;
  double t6205;
  double t6210;
  double t6212;
  double t6221;
  double t6222;
  double t6226;
  double t5014;
  double t5041;
  double t5184;
  double t5302;
  double t5324;
  double t5344;
  double t6230;
  double t6232;
  double t6235;
  double t5579;
  double t5611;
  double t5629;
  double t5718;
  double t5735;
  double t5736;
  double t5801;
  double t5805;
  double t5826;
  double t6248;
  double t6249;
  double t6252;
  double t6254;
  double t6256;
  double t6257;
  double t5878;
  double t5891;
  double t5895;
  double t5951;
  double t5965;
  double t5979;
  double t6259;
  double t6261;
  double t6263;
  double t6268;
  double t6269;
  double t6271;
  double t6017;
  double t6020;
  double t6022;
  double t6060;
  double t6071;
  double t6073;
  double t6277;
  double t6283;
  double t6284;
  double t6291;
  double t6292;
  double t6294;
  double t6084;
  double t6085;
  double t6088;
  double t6111;
  double t6120;
  double t6123;
  double t6298;
  double t6301;
  double t6304;
  double t6309;
  double t6311;
  double t6312;
  double t6143;
  double t6148;
  double t6153;
  double t6317;
  double t6319;
  double t6323;
  double t6327;
  double t6328;
  double t6329;
  double t6355;
  double t6356;
  double t6360;
  double t6369;
  double t6370;
  double t6371;
  double t6373;
  double t6374;
  double t6375;
  double t6378;
  double t6379;
  double t6380;
  double t6383;
  double t6386;
  double t6389;
  double t6391;
  double t6392;
  double t6394;
  double t6397;
  double t6398;
  double t6402;
  double t6406;
  double t6407;
  double t6408;
  double t6414;
  double t6415;
  double t6417;
  double t6421;
  double t6422;
  double t6423;
  double t6425;
  double t6426;
  double t6428;
  double t6452;
  double t6454;
  double t6455;
  double t6466;
  double t6468;
  double t6469;
  double t6472;
  double t6474;
  double t6480;
  double t6483;
  double t6484;
  double t6485;
  double t6488;
  double t6489;
  double t6490;
  double t6492;
  double t6495;
  double t6500;
  double t6505;
  double t6507;
  double t6510;
  double t6512;
  double t6514;
  double t6515;
  double t6518;
  double t6520;
  double t6521;
  double t6523;
  double t6524;
  double t6527;
  double t6529;
  double t6531;
  double t6532;
  double t6548;
  double t6549;
  double t6550;
  double t6559;
  double t6560;
  double t6561;
  double t6564;
  double t6565;
  double t6567;
  double t6571;
  double t6572;
  double t6573;
  double t6575;
  double t6576;
  double t6577;
  double t6579;
  double t6580;
  double t6581;
  double t6584;
  double t6585;
  double t6588;
  double t6591;
  double t6593;
  double t6594;
  double t6596;
  double t6597;
  double t6599;
  double t6601;
  double t6603;
  double t6604;
  double t6608;
  double t6609;
  double t6610;
  double t6626;
  double t6627;
  double t6629;
  double t6631;
  double t6632;
  double t6637;
  double t6639;
  double t6640;
  double t6644;
  double t6645;
  double t6646;
  double t6648;
  double t6649;
  double t6650;
  double t6652;
  double t6653;
  double t6654;
  double t6656;
  double t6657;
  double t6658;
  double t6661;
  double t6662;
  double t6663;
  double t6666;
  double t6667;
  double t6670;
  double t6672;
  double t6673;
  double t6674;
  double t6676;
  double t6677;
  double t6678;
  double t6694;
  double t6695;
  double t6698;
  double t6701;
  double t6702;
  double t6703;
  double t6707;
  double t6708;
  double t6710;
  double t6712;
  double t6714;
  double t6718;
  double t6719;
  double t6720;
  double t6723;
  double t6726;
  double t6727;
  double t6729;
  double t6730;
  double t6731;
  double t6733;
  double t6734;
  double t6735;
  double t6737;
  double t6738;
  double t6739;
  double t6741;
  double t6742;
  double t6743;
  double t6746;
  double t6748;
  double t6749;
  double t6767;
  double t6768;
  double t6769;
  double t6774;
  double t6775;
  double t6776;
  double t6779;
  double t6782;
  double t6784;
  double t6787;
  double t6788;
  double t6789;
  double t6792;
  double t6793;
  double t6794;
  double t6796;
  double t6797;
  double t6798;
  double t6800;
  double t6801;
  double t6802;
  double t6804;
  double t6805;
  double t6806;
  double t6808;
  double t6809;
  double t6811;
  double t6813;
  double t6814;
  double t6815;
  double t6832;
  double t6833;
  double t6835;
  double t6836;
  double t6837;
  double t6839;
  double t6840;
  double t6841;
  double t6843;
  double t6844;
  double t6845;
  double t6847;
  double t6848;
  double t6849;
  double t6851;
  double t6852;
  double t6853;
  double t6855;
  double t6856;
  double t6857;
  double t6859;
  double t6860;
  double t6861;
  double t6863;
  double t6864;
  double t6865;
  double t6877;
  double t6878;
  double t6879;
  double t6881;
  double t6882;
  double t6886;
  double t6887;
  double t6889;
  double t6890;
  double t6891;
  double t6893;
  double t6894;
  double t6895;
  double t6897;
  double t6898;
  double t6899;
  double t6901;
  double t6902;
  double t6903;
  double t6905;
  double t6906;
  double t6907;
  double t6909;
  double t6910;
  double t6911;
  double t6913;
  double t6914;
  double t6915;
  double t6917;
  double t6918;
  double t6919;
  double t6771;
  double t6772;
  double t6773;
  double t6778;
  double t6785;
  double t6791;
  double t6795;
  double t6799;
  double t6803;
  double t6807;
  double t6812;
  double t6816;
  double t6817;
  double t6818;
  double t6819;
  double t6820;
  double t6821;
  double t6823;
  double t6824;
  double t6825;
  double t6240;
  double t6244;
  double t6245;
  double t6947;
  double t6948;
  double t6949;
  double t6951;
  double t6952;
  double t6953;
  double t6955;
  double t6956;
  double t6957;
  double t6959;
  double t6960;
  double t6961;
  double t6963;
  double t6964;
  double t6965;
  double t6967;
  double t6968;
  double t6969;
  double t6933;
  double t6934;
  double t6935;
  double t6937;
  double t6938;
  double t6981;
  double t6982;
  double t6983;
  double t6985;
  double t6986;
  double t6987;
  double t6994;
  double t6995;
  double t6996;
  double t6998;
  double t6999;
  double t7000;
  double t7002;
  double t7003;
  double t7004;
  double t7006;
  double t7007;
  double t7008;
  double t7010;
  double t7011;
  double t7012;
  double t7014;
  double t7015;
  double t7016;
  double t7028;
  double t7029;
  double t7030;
  double t7032;
  double t7033;
  double t7034;
  double t7042;
  double t7043;
  double t7044;
  double t7046;
  double t7047;
  double t7048;
  double t7050;
  double t7051;
  double t7052;
  double t7054;
  double t7055;
  double t7056;
  double t7058;
  double t7059;
  double t7060;
  double t7062;
  double t7063;
  double t7064;
  double t7082;
  double t7083;
  double t7084;
  double t7087;
  double t7088;
  double t7090;
  double t7091;
  double t7092;
  double t7094;
  double t7095;
  double t7096;
  double t7098;
  double t7099;
  double t7100;
  double t7102;
  double t7103;
  double t7104;
  double t7106;
  double t7107;
  double t7108;
  double t7075;
  double t7076;
  double t7078;
  double t7079;
  double t7080;
  double t7120;
  double t7121;
  double t7122;
  double t7124;
  double t7125;
  double t7126;
  double t7128;
  double t7129;
  double t7130;
  double t7132;
  double t7133;
  double t7134;
  double t7136;
  double t7137;
  double t7138;
  double t7140;
  double t7141;
  double t7142;
  double t7144;
  double t7145;
  double t7146;
  double t7148;
  double t7149;
  double t7150;
  double t7152;
  double t7153;
  double t7154;
  double t7166;
  double t7167;
  double t7168;
  double t7170;
  double t7171;
  double t7172;
  double t7174;
  double t7175;
  double t7176;
  double t7178;
  double t7179;
  double t7180;
  double t7182;
  double t7183;
  double t7184;
  double t7186;
  double t7187;
  double t7188;
  double t7190;
  double t7191;
  double t7192;
  double t7194;
  double t7195;
  double t7196;
  double t7198;
  double t7199;
  double t7200;
  double t7219;
  double t7220;
  double t7222;
  double t7223;
  double t7224;
  double t7226;
  double t7227;
  double t7229;
  double t7230;
  double t7231;
  double t7233;
  double t7234;
  double t7235;
  double t7211;
  double t7212;
  double t7213;
  double t7215;
  double t7216;
  double t7246;
  double t7247;
  double t7248;
  double t7251;
  double t7252;
  double t7254;
  double t7255;
  double t7257;
  double t7258;
  double t7259;
  double t7261;
  double t7262;
  double t7263;
  double t7265;
  double t7266;
  double t7267;
  double t7269;
  double t7270;
  double t7271;
  double t7282;
  double t7283;
  double t7284;
  double t7287;
  double t7288;
  double t7290;
  double t7291;
  double t7293;
  double t7294;
  double t7295;
  double t7297;
  double t7298;
  double t7299;
  double t7301;
  double t7302;
  double t7303;
  double t7305;
  double t7306;
  double t7307;
  double t7325;
  double t7326;
  double t7329;
  double t7330;
  double t7332;
  double t7333;
  double t7334;
  double t7318;
  double t7319;
  double t7321;
  double t7322;
  double t7323;
  double t7346;
  double t7347;
  double t7348;
  double t7350;
  double t7351;
  double t7353;
  double t7354;
  double t7356;
  double t7357;
  double t7358;
  double t7360;
  double t7361;
  double t7362;
  double t7374;
  double t7375;
  double t7376;
  double t7378;
  double t7379;
  double t7381;
  double t7382;
  double t7384;
  double t7385;
  double t7386;
  double t7388;
  double t7389;
  double t7390;
  double t7409;
  double t7410;
  double t6340;
  double t7401;
  double t7402;
  double t7403;
  double t7405;
  double t7406;
  double t7420;
  double t7421;
  double t7422;
  double t7425;
  double t7426;
  double t7428;
  double t7429;
  double t7440;
  double t7441;
  double t7442;
  double t7445;
  double t7446;
  double t7448;
  double t7449;
  double t7412;
  double t6342;
  double t6346;
  double t7460;
  double t7461;
  double t7463;
  double t7464;
  double t7465;
  double t7431;
  double t7473;
  double t7474;
  double t7475;
  double t7435;
  double t7451;
  double t7485;
  double t7486;
  double t7487;
  double t7455;
  t2163 = Cos(var1[5]);
  t2327 = Sin(var1[3]);
  t2347 = Sin(var1[4]);
  t1358 = Cos(var1[3]);
  t2508 = Sin(var1[5]);
  t239 = Cos(var1[6]);
  t2239 = -1.*t1358*t2163;
  t2712 = -1.*t2327*t2347*t2508;
  t2815 = t2239 + t2712;
  t3250 = -1.*t2163*t2327*t2347;
  t3362 = t1358*t2508;
  t3369 = t3250 + t3362;
  t4369 = Sin(var1[6]);
  t4916 = Cos(var1[7]);
  t4981 = -1.*t4916;
  t5005 = 1. + t4981;
  t5017 = Sin(var1[7]);
  t4668 = t239*t2815;
  t4831 = t3369*t4369;
  t4914 = t4668 + t4831;
  t5245 = Cos(var1[4]);
  t5514 = Cos(var1[8]);
  t5536 = -1.*t5514;
  t5558 = 1. + t5536;
  t5596 = Sin(var1[8]);
  t5442 = -1.*t5245*t4916*t2327;
  t5486 = t4914*t5017;
  t5507 = t5442 + t5486;
  t5673 = t239*t3369;
  t5676 = -1.*t2815*t4369;
  t5714 = t5673 + t5676;
  t5779 = Cos(var1[9]);
  t5790 = -1.*t5779;
  t5798 = 1. + t5790;
  t5803 = Sin(var1[9]);
  t5828 = t5514*t5507;
  t5837 = t5714*t5596;
  t5842 = t5828 + t5837;
  t5897 = t5514*t5714;
  t5899 = -1.*t5507*t5596;
  t5908 = t5897 + t5899;
  t5911 = Cos(var1[10]);
  t5918 = -1.*t5911;
  t5928 = 1. + t5918;
  t5953 = Sin(var1[10]);
  t5981 = -1.*t5803*t5842;
  t5997 = t5779*t5908;
  t6011 = t5981 + t5997;
  t6025 = t5779*t5842;
  t6034 = t5803*t5908;
  t6035 = t6025 + t6034;
  t6047 = Cos(var1[11]);
  t6050 = -1.*t6047;
  t6054 = 1. + t6050;
  t6067 = Sin(var1[11]);
  t6074 = t5953*t6011;
  t6078 = t5911*t6035;
  t6080 = t6074 + t6078;
  t6091 = t5911*t6011;
  t6093 = -1.*t5953*t6035;
  t6096 = t6091 + t6093;
  t6101 = Cos(var1[12]);
  t6102 = -1.*t6101;
  t6107 = 1. + t6102;
  t6116 = Sin(var1[12]);
  t6124 = -1.*t6067*t6080;
  t6126 = t6047*t6096;
  t6130 = t6124 + t6126;
  t6154 = t6047*t6080;
  t6161 = t6067*t6096;
  t6162 = t6154 + t6161;
  t775 = -1.*t239;
  t811 = 1. + t775;
  t897 = 0.135*t811;
  t1347 = 0. + t897;
  t4419 = -0.135*t4369;
  t4581 = 0. + t4419;
  t6205 = -1.*t2163*t2327;
  t6210 = t1358*t2347*t2508;
  t6212 = t6205 + t6210;
  t6221 = t1358*t2163*t2347;
  t6222 = t2327*t2508;
  t6226 = t6221 + t6222;
  t5014 = 0.135*t5005;
  t5041 = 0.049*t5017;
  t5184 = 0. + t5014 + t5041;
  t5302 = -0.049*t5005;
  t5324 = 0.135*t5017;
  t5344 = 0. + t5302 + t5324;
  t6230 = t239*t6212;
  t6232 = t6226*t4369;
  t6235 = t6230 + t6232;
  t5579 = -0.049*t5558;
  t5611 = -0.09*t5596;
  t5629 = 0. + t5579 + t5611;
  t5718 = -0.09*t5558;
  t5735 = 0.049*t5596;
  t5736 = 0. + t5718 + t5735;
  t5801 = -0.049*t5798;
  t5805 = -0.21*t5803;
  t5826 = 0. + t5801 + t5805;
  t6248 = t1358*t5245*t4916;
  t6249 = t6235*t5017;
  t6252 = t6248 + t6249;
  t6254 = t239*t6226;
  t6256 = -1.*t6212*t4369;
  t6257 = t6254 + t6256;
  t5878 = -0.21*t5798;
  t5891 = 0.049*t5803;
  t5895 = 0. + t5878 + t5891;
  t5951 = -0.2707*t5928;
  t5965 = 0.0016*t5953;
  t5979 = 0. + t5951 + t5965;
  t6259 = t5514*t6252;
  t6261 = t6257*t5596;
  t6263 = t6259 + t6261;
  t6268 = t5514*t6257;
  t6269 = -1.*t6252*t5596;
  t6271 = t6268 + t6269;
  t6017 = -0.0016*t5928;
  t6020 = -0.2707*t5953;
  t6022 = 0. + t6017 + t6020;
  t6060 = 0.0184*t6054;
  t6071 = -0.7055*t6067;
  t6073 = 0. + t6060 + t6071;
  t6277 = -1.*t5803*t6263;
  t6283 = t5779*t6271;
  t6284 = t6277 + t6283;
  t6291 = t5779*t6263;
  t6292 = t5803*t6271;
  t6294 = t6291 + t6292;
  t6084 = -0.7055*t6054;
  t6085 = -0.0184*t6067;
  t6088 = 0. + t6084 + t6085;
  t6111 = -1.1135*t6107;
  t6120 = 0.0216*t6116;
  t6123 = 0. + t6111 + t6120;
  t6298 = t5953*t6284;
  t6301 = t5911*t6294;
  t6304 = t6298 + t6301;
  t6309 = t5911*t6284;
  t6311 = -1.*t5953*t6294;
  t6312 = t6309 + t6311;
  t6143 = -0.0216*t6107;
  t6148 = -1.1135*t6116;
  t6153 = 0. + t6143 + t6148;
  t6317 = -1.*t6067*t6304;
  t6319 = t6047*t6312;
  t6323 = t6317 + t6319;
  t6327 = t6047*t6304;
  t6328 = t6067*t6312;
  t6329 = t6327 + t6328;
  t6355 = t1358*t5245*t239*t2508;
  t6356 = t1358*t5245*t2163*t4369;
  t6360 = t6355 + t6356;
  t6369 = -1.*t1358*t4916*t2347;
  t6370 = t6360*t5017;
  t6371 = t6369 + t6370;
  t6373 = t1358*t5245*t2163*t239;
  t6374 = -1.*t1358*t5245*t2508*t4369;
  t6375 = t6373 + t6374;
  t6378 = t5514*t6371;
  t6379 = t6375*t5596;
  t6380 = t6378 + t6379;
  t6383 = t5514*t6375;
  t6386 = -1.*t6371*t5596;
  t6389 = t6383 + t6386;
  t6391 = -1.*t5803*t6380;
  t6392 = t5779*t6389;
  t6394 = t6391 + t6392;
  t6397 = t5779*t6380;
  t6398 = t5803*t6389;
  t6402 = t6397 + t6398;
  t6406 = t5953*t6394;
  t6407 = t5911*t6402;
  t6408 = t6406 + t6407;
  t6414 = t5911*t6394;
  t6415 = -1.*t5953*t6402;
  t6417 = t6414 + t6415;
  t6421 = -1.*t6067*t6408;
  t6422 = t6047*t6417;
  t6423 = t6421 + t6422;
  t6425 = t6047*t6408;
  t6426 = t6067*t6417;
  t6428 = t6425 + t6426;
  t6452 = t5245*t239*t2327*t2508;
  t6454 = t5245*t2163*t2327*t4369;
  t6455 = t6452 + t6454;
  t6466 = -1.*t4916*t2327*t2347;
  t6468 = t6455*t5017;
  t6469 = t6466 + t6468;
  t6472 = t5245*t2163*t239*t2327;
  t6474 = -1.*t5245*t2327*t2508*t4369;
  t6480 = t6472 + t6474;
  t6483 = t5514*t6469;
  t6484 = t6480*t5596;
  t6485 = t6483 + t6484;
  t6488 = t5514*t6480;
  t6489 = -1.*t6469*t5596;
  t6490 = t6488 + t6489;
  t6492 = -1.*t5803*t6485;
  t6495 = t5779*t6490;
  t6500 = t6492 + t6495;
  t6505 = t5779*t6485;
  t6507 = t5803*t6490;
  t6510 = t6505 + t6507;
  t6512 = t5953*t6500;
  t6514 = t5911*t6510;
  t6515 = t6512 + t6514;
  t6518 = t5911*t6500;
  t6520 = -1.*t5953*t6510;
  t6521 = t6518 + t6520;
  t6523 = -1.*t6067*t6515;
  t6524 = t6047*t6521;
  t6527 = t6523 + t6524;
  t6529 = t6047*t6515;
  t6531 = t6067*t6521;
  t6532 = t6529 + t6531;
  t6548 = -1.*t239*t2347*t2508;
  t6549 = -1.*t2163*t2347*t4369;
  t6550 = t6548 + t6549;
  t6559 = -1.*t5245*t4916;
  t6560 = t6550*t5017;
  t6561 = t6559 + t6560;
  t6564 = -1.*t2163*t239*t2347;
  t6565 = t2347*t2508*t4369;
  t6567 = t6564 + t6565;
  t6571 = t5514*t6561;
  t6572 = t6567*t5596;
  t6573 = t6571 + t6572;
  t6575 = t5514*t6567;
  t6576 = -1.*t6561*t5596;
  t6577 = t6575 + t6576;
  t6579 = -1.*t5803*t6573;
  t6580 = t5779*t6577;
  t6581 = t6579 + t6580;
  t6584 = t5779*t6573;
  t6585 = t5803*t6577;
  t6588 = t6584 + t6585;
  t6591 = t5953*t6581;
  t6593 = t5911*t6588;
  t6594 = t6591 + t6593;
  t6596 = t5911*t6581;
  t6597 = -1.*t5953*t6588;
  t6599 = t6596 + t6597;
  t6601 = -1.*t6067*t6594;
  t6603 = t6047*t6599;
  t6604 = t6601 + t6603;
  t6608 = t6047*t6594;
  t6609 = t6067*t6599;
  t6610 = t6608 + t6609;
  t6626 = t2163*t2327;
  t6627 = -1.*t1358*t2347*t2508;
  t6629 = t6626 + t6627;
  t6631 = t6629*t4369;
  t6632 = t6254 + t6631;
  t6637 = t239*t6629;
  t6639 = -1.*t6226*t4369;
  t6640 = t6637 + t6639;
  t6644 = t5514*t6632*t5017;
  t6645 = t6640*t5596;
  t6646 = t6644 + t6645;
  t6648 = t5514*t6640;
  t6649 = -1.*t6632*t5017*t5596;
  t6650 = t6648 + t6649;
  t6652 = -1.*t5803*t6646;
  t6653 = t5779*t6650;
  t6654 = t6652 + t6653;
  t6656 = t5779*t6646;
  t6657 = t5803*t6650;
  t6658 = t6656 + t6657;
  t6661 = t5953*t6654;
  t6662 = t5911*t6658;
  t6663 = t6661 + t6662;
  t6666 = t5911*t6654;
  t6667 = -1.*t5953*t6658;
  t6670 = t6666 + t6667;
  t6672 = -1.*t6067*t6663;
  t6673 = t6047*t6670;
  t6674 = t6672 + t6673;
  t6676 = t6047*t6663;
  t6677 = t6067*t6670;
  t6678 = t6676 + t6677;
  t6694 = t2163*t2327*t2347;
  t6695 = -1.*t1358*t2508;
  t6698 = t6694 + t6695;
  t6701 = t239*t6698;
  t6702 = t2815*t4369;
  t6703 = t6701 + t6702;
  t6707 = -1.*t6698*t4369;
  t6708 = t4668 + t6707;
  t6710 = t5514*t6703*t5017;
  t6712 = t6708*t5596;
  t6714 = t6710 + t6712;
  t6718 = t5514*t6708;
  t6719 = -1.*t6703*t5017*t5596;
  t6720 = t6718 + t6719;
  t6723 = -1.*t5803*t6714;
  t6726 = t5779*t6720;
  t6727 = t6723 + t6726;
  t6729 = t5779*t6714;
  t6730 = t5803*t6720;
  t6731 = t6729 + t6730;
  t6733 = t5953*t6727;
  t6734 = t5911*t6731;
  t6735 = t6733 + t6734;
  t6737 = t5911*t6727;
  t6738 = -1.*t5953*t6731;
  t6739 = t6737 + t6738;
  t6741 = -1.*t6067*t6735;
  t6742 = t6047*t6739;
  t6743 = t6741 + t6742;
  t6746 = t6047*t6735;
  t6748 = t6067*t6739;
  t6749 = t6746 + t6748;
  t6767 = t5245*t2163*t239;
  t6768 = -1.*t5245*t2508*t4369;
  t6769 = t6767 + t6768;
  t6774 = -1.*t5245*t239*t2508;
  t6775 = -1.*t5245*t2163*t4369;
  t6776 = t6774 + t6775;
  t6779 = t5514*t6769*t5017;
  t6782 = t6776*t5596;
  t6784 = t6779 + t6782;
  t6787 = t5514*t6776;
  t6788 = -1.*t6769*t5017*t5596;
  t6789 = t6787 + t6788;
  t6792 = -1.*t5803*t6784;
  t6793 = t5779*t6789;
  t6794 = t6792 + t6793;
  t6796 = t5779*t6784;
  t6797 = t5803*t6789;
  t6798 = t6796 + t6797;
  t6800 = t5953*t6794;
  t6801 = t5911*t6798;
  t6802 = t6800 + t6801;
  t6804 = t5911*t6794;
  t6805 = -1.*t5953*t6798;
  t6806 = t6804 + t6805;
  t6808 = -1.*t6067*t6802;
  t6809 = t6047*t6806;
  t6811 = t6808 + t6809;
  t6813 = t6047*t6802;
  t6814 = t6067*t6806;
  t6815 = t6813 + t6814;
  t6832 = -1.*t239*t6212;
  t6833 = t6832 + t6639;
  t6835 = t5514*t6257*t5017;
  t6836 = t6833*t5596;
  t6837 = t6835 + t6836;
  t6839 = t5514*t6833;
  t6840 = -1.*t6257*t5017*t5596;
  t6841 = t6839 + t6840;
  t6843 = -1.*t5803*t6837;
  t6844 = t5779*t6841;
  t6845 = t6843 + t6844;
  t6847 = t5779*t6837;
  t6848 = t5803*t6841;
  t6849 = t6847 + t6848;
  t6851 = t5953*t6845;
  t6852 = t5911*t6849;
  t6853 = t6851 + t6852;
  t6855 = t5911*t6845;
  t6856 = -1.*t5953*t6849;
  t6857 = t6855 + t6856;
  t6859 = -1.*t6067*t6853;
  t6860 = t6047*t6857;
  t6861 = t6859 + t6860;
  t6863 = t6047*t6853;
  t6864 = t6067*t6857;
  t6865 = t6863 + t6864;
  t6877 = t1358*t2163;
  t6878 = t2327*t2347*t2508;
  t6879 = t6877 + t6878;
  t6881 = -1.*t6879*t4369;
  t6882 = t6701 + t6881;
  t6886 = -1.*t239*t6879;
  t6887 = t6886 + t6707;
  t6889 = t5514*t6882*t5017;
  t6890 = t6887*t5596;
  t6891 = t6889 + t6890;
  t6893 = t5514*t6887;
  t6894 = -1.*t6882*t5017*t5596;
  t6895 = t6893 + t6894;
  t6897 = -1.*t5803*t6891;
  t6898 = t5779*t6895;
  t6899 = t6897 + t6898;
  t6901 = t5779*t6891;
  t6902 = t5803*t6895;
  t6903 = t6901 + t6902;
  t6905 = t5953*t6899;
  t6906 = t5911*t6903;
  t6907 = t6905 + t6906;
  t6909 = t5911*t6899;
  t6910 = -1.*t5953*t6903;
  t6911 = t6909 + t6910;
  t6913 = -1.*t6067*t6907;
  t6914 = t6047*t6911;
  t6915 = t6913 + t6914;
  t6917 = t6047*t6907;
  t6918 = t6067*t6911;
  t6919 = t6917 + t6918;
  t6771 = 0.1305*t4916*t6769;
  t6772 = t6769*t5184;
  t6773 = t6769*t5017*t5629;
  t6778 = t6776*t5736;
  t6785 = t5826*t6784;
  t6791 = t5895*t6789;
  t6795 = t5979*t6794;
  t6799 = t6022*t6798;
  t6803 = t6073*t6802;
  t6807 = t6088*t6806;
  t6812 = t6123*t6811;
  t6816 = t6153*t6815;
  t6817 = t6116*t6811;
  t6818 = t6101*t6815;
  t6819 = t6817 + t6818;
  t6820 = -0.031697*t6819;
  t6821 = t6101*t6811;
  t6823 = -1.*t6116*t6815;
  t6824 = t6821 + t6823;
  t6825 = -1.189886*t6824;
  t6240 = t4916*t6235;
  t6244 = -1.*t1358*t5245*t5017;
  t6245 = t6240 + t6244;
  t6947 = -1.*t5514*t5803*t6245;
  t6948 = -1.*t5779*t6245*t5596;
  t6949 = t6947 + t6948;
  t6951 = t5779*t5514*t6245;
  t6952 = -1.*t5803*t6245*t5596;
  t6953 = t6951 + t6952;
  t6955 = t5953*t6949;
  t6956 = t5911*t6953;
  t6957 = t6955 + t6956;
  t6959 = t5911*t6949;
  t6960 = -1.*t5953*t6953;
  t6961 = t6959 + t6960;
  t6963 = -1.*t6067*t6957;
  t6964 = t6047*t6961;
  t6965 = t6963 + t6964;
  t6967 = t6047*t6957;
  t6968 = t6067*t6961;
  t6969 = t6967 + t6968;
  t6933 = 0.135*t4916;
  t6934 = -0.049*t5017;
  t6935 = t6933 + t6934;
  t6937 = 0.049*t4916;
  t6938 = t6937 + t5324;
  t6981 = t239*t6879;
  t6982 = t6698*t4369;
  t6983 = t6981 + t6982;
  t6985 = t4916*t6983;
  t6986 = -1.*t5245*t2327*t5017;
  t6987 = t6985 + t6986;
  t6994 = -1.*t5514*t5803*t6987;
  t6995 = -1.*t5779*t6987*t5596;
  t6996 = t6994 + t6995;
  t6998 = t5779*t5514*t6987;
  t6999 = -1.*t5803*t6987*t5596;
  t7000 = t6998 + t6999;
  t7002 = t5953*t6996;
  t7003 = t5911*t7000;
  t7004 = t7002 + t7003;
  t7006 = t5911*t6996;
  t7007 = -1.*t5953*t7000;
  t7008 = t7006 + t7007;
  t7010 = -1.*t6067*t7004;
  t7011 = t6047*t7008;
  t7012 = t7010 + t7011;
  t7014 = t6047*t7004;
  t7015 = t6067*t7008;
  t7016 = t7014 + t7015;
  t7028 = t5245*t239*t2508;
  t7029 = t5245*t2163*t4369;
  t7030 = t7028 + t7029;
  t7032 = t4916*t7030;
  t7033 = t2347*t5017;
  t7034 = t7032 + t7033;
  t7042 = -1.*t5514*t5803*t7034;
  t7043 = -1.*t5779*t7034*t5596;
  t7044 = t7042 + t7043;
  t7046 = t5779*t5514*t7034;
  t7047 = -1.*t5803*t7034*t5596;
  t7048 = t7046 + t7047;
  t7050 = t5953*t7044;
  t7051 = t5911*t7048;
  t7052 = t7050 + t7051;
  t7054 = t5911*t7044;
  t7055 = -1.*t5953*t7048;
  t7056 = t7054 + t7055;
  t7058 = -1.*t6067*t7052;
  t7059 = t6047*t7056;
  t7060 = t7058 + t7059;
  t7062 = t6047*t7052;
  t7063 = t6067*t7056;
  t7064 = t7062 + t7063;
  t7082 = -1.*t5514*t6252;
  t7083 = -1.*t6257*t5596;
  t7084 = t7082 + t7083;
  t7087 = t5803*t7084;
  t7088 = t7087 + t6283;
  t7090 = t5779*t7084;
  t7091 = -1.*t5803*t6271;
  t7092 = t7090 + t7091;
  t7094 = -1.*t5953*t7088;
  t7095 = t5911*t7092;
  t7096 = t7094 + t7095;
  t7098 = t5911*t7088;
  t7099 = t5953*t7092;
  t7100 = t7098 + t7099;
  t7102 = t6067*t7096;
  t7103 = t6047*t7100;
  t7104 = t7102 + t7103;
  t7106 = t6047*t7096;
  t7107 = -1.*t6067*t7100;
  t7108 = t7106 + t7107;
  t7075 = 0.049*t5514;
  t7076 = t7075 + t5611;
  t7078 = -0.09*t5514;
  t7079 = -0.049*t5596;
  t7080 = t7078 + t7079;
  t7120 = t5245*t4916*t2327;
  t7121 = t6983*t5017;
  t7122 = t7120 + t7121;
  t7124 = -1.*t5514*t7122;
  t7125 = -1.*t6882*t5596;
  t7126 = t7124 + t7125;
  t7128 = t5514*t6882;
  t7129 = -1.*t7122*t5596;
  t7130 = t7128 + t7129;
  t7132 = t5803*t7126;
  t7133 = t5779*t7130;
  t7134 = t7132 + t7133;
  t7136 = t5779*t7126;
  t7137 = -1.*t5803*t7130;
  t7138 = t7136 + t7137;
  t7140 = -1.*t5953*t7134;
  t7141 = t5911*t7138;
  t7142 = t7140 + t7141;
  t7144 = t5911*t7134;
  t7145 = t5953*t7138;
  t7146 = t7144 + t7145;
  t7148 = t6067*t7142;
  t7149 = t6047*t7146;
  t7150 = t7148 + t7149;
  t7152 = t6047*t7142;
  t7153 = -1.*t6067*t7146;
  t7154 = t7152 + t7153;
  t7166 = -1.*t4916*t2347;
  t7167 = t7030*t5017;
  t7168 = t7166 + t7167;
  t7170 = -1.*t5514*t7168;
  t7171 = -1.*t6769*t5596;
  t7172 = t7170 + t7171;
  t7174 = t5514*t6769;
  t7175 = -1.*t7168*t5596;
  t7176 = t7174 + t7175;
  t7178 = t5803*t7172;
  t7179 = t5779*t7176;
  t7180 = t7178 + t7179;
  t7182 = t5779*t7172;
  t7183 = -1.*t5803*t7176;
  t7184 = t7182 + t7183;
  t7186 = -1.*t5953*t7180;
  t7187 = t5911*t7184;
  t7188 = t7186 + t7187;
  t7190 = t5911*t7180;
  t7191 = t5953*t7184;
  t7192 = t7190 + t7191;
  t7194 = t6067*t7188;
  t7195 = t6047*t7192;
  t7196 = t7194 + t7195;
  t7198 = t6047*t7188;
  t7199 = -1.*t6067*t7192;
  t7200 = t7198 + t7199;
  t7219 = -1.*t5779*t6263;
  t7220 = t7219 + t7091;
  t7222 = -1.*t5953*t6284;
  t7223 = t5911*t7220;
  t7224 = t7222 + t7223;
  t7226 = t5953*t7220;
  t7227 = t6309 + t7226;
  t7229 = t6067*t7224;
  t7230 = t6047*t7227;
  t7231 = t7229 + t7230;
  t7233 = t6047*t7224;
  t7234 = -1.*t6067*t7227;
  t7235 = t7233 + t7234;
  t7211 = -0.21*t5779;
  t7212 = -0.049*t5803;
  t7213 = t7211 + t7212;
  t7215 = 0.049*t5779;
  t7216 = t7215 + t5805;
  t7246 = t5514*t7122;
  t7247 = t6882*t5596;
  t7248 = t7246 + t7247;
  t7251 = -1.*t5803*t7248;
  t7252 = t7251 + t7133;
  t7254 = -1.*t5779*t7248;
  t7255 = t7254 + t7137;
  t7257 = -1.*t5953*t7252;
  t7258 = t5911*t7255;
  t7259 = t7257 + t7258;
  t7261 = t5911*t7252;
  t7262 = t5953*t7255;
  t7263 = t7261 + t7262;
  t7265 = t6067*t7259;
  t7266 = t6047*t7263;
  t7267 = t7265 + t7266;
  t7269 = t6047*t7259;
  t7270 = -1.*t6067*t7263;
  t7271 = t7269 + t7270;
  t7282 = t5514*t7168;
  t7283 = t6769*t5596;
  t7284 = t7282 + t7283;
  t7287 = -1.*t5803*t7284;
  t7288 = t7287 + t7179;
  t7290 = -1.*t5779*t7284;
  t7291 = t7290 + t7183;
  t7293 = -1.*t5953*t7288;
  t7294 = t5911*t7291;
  t7295 = t7293 + t7294;
  t7297 = t5911*t7288;
  t7298 = t5953*t7291;
  t7299 = t7297 + t7298;
  t7301 = t6067*t7295;
  t7302 = t6047*t7299;
  t7303 = t7301 + t7302;
  t7305 = t6047*t7295;
  t7306 = -1.*t6067*t7299;
  t7307 = t7305 + t7306;
  t7325 = -1.*t5911*t6294;
  t7326 = t7222 + t7325;
  t7329 = t6067*t7326;
  t7330 = t7329 + t6319;
  t7332 = t6047*t7326;
  t7333 = -1.*t6067*t6312;
  t7334 = t7332 + t7333;
  t7318 = 0.0016*t5911;
  t7319 = t7318 + t6020;
  t7321 = -0.2707*t5911;
  t7322 = -0.0016*t5953;
  t7323 = t7321 + t7322;
  t7346 = t5779*t7248;
  t7347 = t5803*t7130;
  t7348 = t7346 + t7347;
  t7350 = -1.*t5911*t7348;
  t7351 = t7257 + t7350;
  t7353 = -1.*t5953*t7348;
  t7354 = t7261 + t7353;
  t7356 = t6067*t7351;
  t7357 = t6047*t7354;
  t7358 = t7356 + t7357;
  t7360 = t6047*t7351;
  t7361 = -1.*t6067*t7354;
  t7362 = t7360 + t7361;
  t7374 = t5779*t7284;
  t7375 = t5803*t7176;
  t7376 = t7374 + t7375;
  t7378 = -1.*t5911*t7376;
  t7379 = t7293 + t7378;
  t7381 = -1.*t5953*t7376;
  t7382 = t7297 + t7381;
  t7384 = t6067*t7379;
  t7385 = t6047*t7382;
  t7386 = t7384 + t7385;
  t7388 = t6047*t7379;
  t7389 = -1.*t6067*t7382;
  t7390 = t7388 + t7389;
  t7409 = -1.*t6047*t6304;
  t7410 = t7409 + t7333;
  t6340 = t6101*t6323;
  t7401 = -0.7055*t6047;
  t7402 = 0.0184*t6067;
  t7403 = t7401 + t7402;
  t7405 = -0.0184*t6047;
  t7406 = t7405 + t6071;
  t7420 = t5953*t7252;
  t7421 = t5911*t7348;
  t7422 = t7420 + t7421;
  t7425 = -1.*t6067*t7422;
  t7426 = t7425 + t7357;
  t7428 = -1.*t6047*t7422;
  t7429 = t7428 + t7361;
  t7440 = t5953*t7288;
  t7441 = t5911*t7376;
  t7442 = t7440 + t7441;
  t7445 = -1.*t6067*t7442;
  t7446 = t7445 + t7385;
  t7448 = -1.*t6047*t7442;
  t7449 = t7448 + t7389;
  t7412 = -1.*t6116*t6323;
  t6342 = -1.*t6116*t6329;
  t6346 = t6340 + t6342;
  t7460 = 0.0216*t6101;
  t7461 = t7460 + t6148;
  t7463 = -1.1135*t6101;
  t7464 = -0.0216*t6116;
  t7465 = t7463 + t7464;
  t7431 = -1.*t6116*t7426;
  t7473 = t6047*t7422;
  t7474 = t6067*t7354;
  t7475 = t7473 + t7474;
  t7435 = t6101*t7426;
  t7451 = -1.*t6116*t7446;
  t7485 = t6047*t7442;
  t7486 = t6067*t7382;
  t7487 = t7485 + t7486;
  t7455 = t6101*t7446;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=t1347*t2815 + t3369*t4581 + t4914*t5184 + 0.1305*(t4914*t4916 + t2327*t5017*t5245) - 1.*t2327*t5245*t5344 + t5507*t5629 + t5714*t5736 + t5826*t5842 + t5895*t5908 + t5979*t6011 + t6022*t6035 + t6073*t6080 + t6088*t6096 + t6123*t6130 + t6153*t6162 - 0.031697*(t6116*t6130 + t6101*t6162) - 1.189886*(t6101*t6130 - 1.*t6116*t6162);
  p_output1[10]=t1358*t5245*t5344 + t1347*t6212 + t4581*t6226 + t5184*t6235 + 0.1305*t6245 + t5629*t6252 + t5736*t6257 + t5826*t6263 + t5895*t6271 + t5979*t6284 + t6022*t6294 + t6073*t6304 + t6088*t6312 + t6123*t6323 + t6153*t6329 - 0.031697*(t6116*t6323 + t6101*t6329) - 1.189886*t6346;
  p_output1[11]=0;
  p_output1[12]=t1347*t1358*t2508*t5245 + t1358*t2163*t4581*t5245 - 1.*t1358*t2347*t5344 + t5184*t6360 + 0.1305*(t1358*t2347*t5017 + t4916*t6360) + t5629*t6371 + t5736*t6375 + t5826*t6380 + t5895*t6389 + t5979*t6394 + t6022*t6402 + t6073*t6408 + t6088*t6417 + t6123*t6423 + t6153*t6428 - 0.031697*(t6116*t6423 + t6101*t6428) - 1.189886*(t6101*t6423 - 1.*t6116*t6428);
  p_output1[13]=t1347*t2327*t2508*t5245 + t2163*t2327*t4581*t5245 - 1.*t2327*t2347*t5344 + t5184*t6455 + 0.1305*(t2327*t2347*t5017 + t4916*t6455) + t5629*t6469 + t5736*t6480 + t5826*t6485 + t5895*t6490 + t5979*t6500 + t6022*t6510 + t6073*t6515 + t6088*t6521 + t6123*t6527 + t6153*t6532 - 0.031697*(t6116*t6527 + t6101*t6532) - 1.189886*(t6101*t6527 - 1.*t6116*t6532);
  p_output1[14]=-1.*t1347*t2347*t2508 - 1.*t2163*t2347*t4581 - 1.*t5245*t5344 + t5184*t6550 + 0.1305*(t5017*t5245 + t4916*t6550) + t5629*t6561 + t5736*t6567 + t5826*t6573 + t5895*t6577 + t5979*t6581 + t6022*t6588 + t6073*t6594 + t6088*t6599 + t6123*t6604 + t6153*t6610 - 0.031697*(t6116*t6604 + t6101*t6610) - 1.189886*(t6101*t6604 - 1.*t6116*t6610);
  p_output1[15]=t1347*t6226 + t4581*t6629 + 0.1305*t4916*t6632 + t5184*t6632 + t5017*t5629*t6632 + t5736*t6640 + t5826*t6646 + t5895*t6650 + t5979*t6654 + t6022*t6658 + t6073*t6663 + t6088*t6670 + t6123*t6674 + t6153*t6678 - 0.031697*(t6116*t6674 + t6101*t6678) - 1.189886*(t6101*t6674 - 1.*t6116*t6678);
  p_output1[16]=t2815*t4581 + t1347*t6698 + 0.1305*t4916*t6703 + t5184*t6703 + t5017*t5629*t6703 + t5736*t6708 + t5826*t6714 + t5895*t6720 + t5979*t6727 + t6022*t6731 + t6073*t6735 + t6088*t6739 + t6123*t6743 + t6153*t6749 - 0.031697*(t6116*t6743 + t6101*t6749) - 1.189886*(t6101*t6743 - 1.*t6116*t6749);
  p_output1[17]=t1347*t2163*t5245 - 1.*t2508*t4581*t5245 + t6771 + t6772 + t6773 + t6778 + t6785 + t6791 + t6795 + t6799 + t6803 + t6807 + t6812 + t6816 + t6820 + t6825;
  p_output1[18]=0.135*t4369*t6212 - 0.135*t239*t6226 + 0.1305*t4916*t6257 + t5184*t6257 + t5017*t5629*t6257 + t5736*t6833 + t5826*t6837 + t5895*t6841 + t5979*t6845 + t6022*t6849 + t6073*t6853 + t6088*t6857 + t6123*t6861 + t6153*t6865 - 0.031697*(t6116*t6861 + t6101*t6865) - 1.189886*(t6101*t6861 - 1.*t6116*t6865);
  p_output1[19]=-0.135*t239*t6698 + 0.135*t4369*t6879 + 0.1305*t4916*t6882 + t5184*t6882 + t5017*t5629*t6882 + t5736*t6887 + t5826*t6891 + t5895*t6895 + t5979*t6899 + t6022*t6903 + t6073*t6907 + t6088*t6911 + t6123*t6915 + t6153*t6919 - 0.031697*(t6116*t6915 + t6101*t6919) - 1.189886*(t6101*t6915 - 1.*t6116*t6919);
  p_output1[20]=-0.135*t2163*t239*t5245 + 0.135*t2508*t4369*t5245 + t6771 + t6772 + t6773 + t6778 + t6785 + t6791 + t6795 + t6799 + t6803 + t6807 + t6812 + t6816 + t6820 + t6825;
  p_output1[21]=0.1305*(-1.*t1358*t4916*t5245 - 1.*t5017*t6235) + t5629*t6245 + t5514*t5826*t6245 - 1.*t5596*t5895*t6245 + t1358*t5245*t6935 + t6235*t6938 + t5979*t6949 + t6022*t6953 + t6073*t6957 + t6088*t6961 + t6123*t6965 + t6153*t6969 - 0.031697*(t6116*t6965 + t6101*t6969) - 1.189886*(t6101*t6965 - 1.*t6116*t6969);
  p_output1[22]=t2327*t5245*t6935 + t6938*t6983 + 0.1305*(t5442 - 1.*t5017*t6983) + t5629*t6987 + t5514*t5826*t6987 - 1.*t5596*t5895*t6987 + t5979*t6996 + t6022*t7000 + t6073*t7004 + t6088*t7008 + t6123*t7012 + t6153*t7016 - 0.031697*(t6116*t7012 + t6101*t7016) - 1.189886*(t6101*t7012 - 1.*t6116*t7016);
  p_output1[23]=-1.*t2347*t6935 + t6938*t7030 + 0.1305*(t2347*t4916 - 1.*t5017*t7030) + t5629*t7034 + t5514*t5826*t7034 - 1.*t5596*t5895*t7034 + t5979*t7044 + t6022*t7048 + t6073*t7052 + t6088*t7056 + t6123*t7060 + t6153*t7064 - 0.031697*(t6116*t7060 + t6101*t7064) - 1.189886*(t6101*t7060 - 1.*t6116*t7064);
  p_output1[24]=t5826*t6271 + t6257*t7076 + t6252*t7080 + t5895*t7084 + t6022*t7088 + t5979*t7092 + t6088*t7096 + t6073*t7100 + t6153*t7104 + t6123*t7108 - 1.189886*(-1.*t6116*t7104 + t6101*t7108) - 0.031697*(t6101*t7104 + t6116*t7108);
  p_output1[25]=t6882*t7076 + t7080*t7122 + t5895*t7126 + t5826*t7130 + t6022*t7134 + t5979*t7138 + t6088*t7142 + t6073*t7146 + t6153*t7150 + t6123*t7154 - 1.189886*(-1.*t6116*t7150 + t6101*t7154) - 0.031697*(t6101*t7150 + t6116*t7154);
  p_output1[26]=t6769*t7076 + t7080*t7168 + t5895*t7172 + t5826*t7176 + t6022*t7180 + t5979*t7184 + t6088*t7188 + t6073*t7192 + t6153*t7196 + t6123*t7200 - 1.189886*(-1.*t6116*t7196 + t6101*t7200) - 0.031697*(t6101*t7196 + t6116*t7200);
  p_output1[27]=t6022*t6284 + t6263*t7213 + t6271*t7216 + t5979*t7220 + t6088*t7224 + t6073*t7227 + t6153*t7231 + t6123*t7235 - 1.189886*(-1.*t6116*t7231 + t6101*t7235) - 0.031697*(t6101*t7231 + t6116*t7235);
  p_output1[28]=t7130*t7216 + t7213*t7248 + t6022*t7252 + t5979*t7255 + t6088*t7259 + t6073*t7263 + t6153*t7267 + t6123*t7271 - 1.189886*(-1.*t6116*t7267 + t6101*t7271) - 0.031697*(t6101*t7267 + t6116*t7271);
  p_output1[29]=t7176*t7216 + t7213*t7284 + t6022*t7288 + t5979*t7291 + t6088*t7295 + t6073*t7299 + t6153*t7303 + t6123*t7307 - 1.189886*(-1.*t6116*t7303 + t6101*t7307) - 0.031697*(t6101*t7303 + t6116*t7307);
  p_output1[30]=t6073*t6312 + t6284*t7319 + t6294*t7323 + t6088*t7326 + t6153*t7330 + t6123*t7334 - 1.189886*(-1.*t6116*t7330 + t6101*t7334) - 0.031697*(t6101*t7330 + t6116*t7334);
  p_output1[31]=t7252*t7319 + t7323*t7348 + t6088*t7351 + t6073*t7354 + t6153*t7358 + t6123*t7362 - 1.189886*(-1.*t6116*t7358 + t6101*t7362) - 0.031697*(t6101*t7358 + t6116*t7362);
  p_output1[32]=t7288*t7319 + t7323*t7376 + t6088*t7379 + t6073*t7382 + t6153*t7386 + t6123*t7390 - 1.189886*(-1.*t6116*t7386 + t6101*t7390) - 0.031697*(t6101*t7386 + t6116*t7390);
  p_output1[33]=t6153*t6323 + t6304*t7403 + t6312*t7406 + t6123*t7410 - 0.031697*(t6340 + t6116*t7410) - 1.189886*(t6101*t7410 + t7412);
  p_output1[34]=t7354*t7406 + t7403*t7422 + t6153*t7426 + t6123*t7429 - 1.189886*(t6101*t7429 + t7431) - 0.031697*(t6116*t7429 + t7435);
  p_output1[35]=t7382*t7406 + t7403*t7442 + t6153*t7446 + t6123*t7449 - 1.189886*(t6101*t7449 + t7451) - 0.031697*(t6116*t7449 + t7455);
  p_output1[36]=-0.031697*t6346 - 1.189886*(-1.*t6101*t6329 + t7412) + t6323*t7461 + t6329*t7465;
  p_output1[37]=t7426*t7461 + t7465*t7475 - 1.189886*(t7431 - 1.*t6101*t7475) - 0.031697*(t7435 - 1.*t6116*t7475);
  p_output1[38]=t7446*t7461 + t7465*t7487 - 1.189886*(t7451 - 1.*t6101*t7487) - 0.031697*(t7455 - 1.*t6116*t7487);
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_LeftToeBottomBack_mex.hh"

namespace SymExpression
{

void J_LeftToeBottomBack_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
